{"version":3,"file":"static/js/435.5ce5ec90.chunk.js","mappings":"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","sources":["components/ui/UniverseCanvas.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\n\r\nconst UniverseCanvas = () => {\r\n  const canvasRef = useRef(null);\r\n  const requestRef = useRef(null);\r\n  const lastTimeRef = useRef(0);\r\n  const FPS = 30; // 限制最大FPS\r\n  const frameDelay = 1000 / FPS;\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    let width,\r\n      height,\r\n      stars = [],\r\n      comets = [];\r\n    let starCount, cometCount;\r\n    const starScale = 0.03; // 调整普通星星的移动速度，使其更慢\r\n    const cometScale = 0.05; // 调整彗星的移动速度，使其更快\r\n    const colors = {\r\n      star: \"226,225,142\",\r\n      comet: \"226,225,224\",\r\n    };\r\n\r\n    // 检测是否为移动设备\r\n    const isMobile = window.innerWidth < 768;\r\n\r\n    // 控制参数\r\n    const MAX_COMETS = isMobile ? 3 : 5; // 移动设备减少彗星数量\r\n    const COMET_INTERVAL = isMobile ? 3000 : 2000; // 移动设备降低彗星频率\r\n    const STAR_DENSITY = isMobile ? 0.25 : 0.4; // 降低移动设备上的星星密度\r\n    let lastCometTime = 0;\r\n\r\n    function init() {\r\n      resize();\r\n      window.addEventListener(\"resize\", handleResize);\r\n\r\n      // 初始化星星\r\n      createStars();\r\n\r\n      // 初始化彗星（一开始只创建少量彗星）\r\n      cometCount = isMobile ? 1 : 2; // 移动设备初始只有1个彗星\r\n      for (let i = 0; i < cometCount; i++) {\r\n        comets.push(new Star(true)); // 创建彗星\r\n      }\r\n\r\n      lastCometTime = Date.now();\r\n      requestRef.current = requestAnimationFrame(animate);\r\n    }\r\n\r\n    // 创建星星的函数，单独提取以便在resize时重新调用\r\n    function createStars() {\r\n      stars = []; // 清空现有星星\r\n      starCount = Math.round(width * STAR_DENSITY); // 根据窗口宽度和设备类型计算星星数量\r\n      for (let i = 0; i < starCount; i++) {\r\n        stars.push(new Star(false)); // 创建普通星星\r\n      }\r\n    }\r\n\r\n    // 处理窗口大小变化\r\n    function handleResize() {\r\n      // 更新canvas尺寸\r\n      resize();\r\n\r\n      // 当窗口大小变化时重新创建星星，确保分布均匀\r\n      createStars();\r\n    }\r\n\r\n    function resize() {\r\n      width = window.innerWidth;\r\n      height = window.innerHeight;\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n    }\r\n\r\n    function animate(timestamp) {\r\n      // 实现基于时间的节流\r\n      if (timestamp - lastTimeRef.current < frameDelay) {\r\n        requestRef.current = requestAnimationFrame(animate);\r\n        return;\r\n      }\r\n\r\n      lastTimeRef.current = timestamp;\r\n      context.clearRect(0, 0, width, height);\r\n\r\n      // 更新普通星星\r\n      stars.forEach((star, index) => {\r\n        star.update();\r\n        if (star.needsReset) {\r\n          stars[index] = new Star(false);\r\n        }\r\n      });\r\n\r\n      // 更新彗星\r\n      comets.forEach((comet, index) => {\r\n        comet.update();\r\n        if (comet.needsReset) {\r\n          comets[index] = new Star(true);\r\n        }\r\n      });\r\n\r\n      // 动态控制彗星数量\r\n      const currentTime = Date.now();\r\n      if (\r\n        comets.length < MAX_COMETS &&\r\n        currentTime - lastCometTime > COMET_INTERVAL\r\n      ) {\r\n        comets.push(new Star(true));\r\n        lastCometTime = currentTime;\r\n      }\r\n\r\n      requestRef.current = requestAnimationFrame(animate);\r\n    }\r\n\r\n    function Star(isComet) {\r\n      this.isComet = isComet;\r\n      this.needsReset = false;\r\n      this.reset();\r\n    }\r\n\r\n    Star.prototype.reset = function () {\r\n      this.needsReset = false;\r\n\r\n      if (this.isComet) {\r\n        // 彗星起始位置在左上方区域\r\n        this.x = Math.random() * width * 0.7;\r\n        this.y = Math.random() * height * 0.25;\r\n        this.dx = Math.random() * cometScale * 10 + 2;\r\n        this.dy = Math.random() * cometScale * 10 + 2;\r\n      } else {\r\n        // 普通星星均匀分布\r\n        this.x = Math.random() * width;\r\n        this.y = Math.random() * height;\r\n        this.dx = (Math.random() - 0.5) * starScale * 10;\r\n        this.dy = (Math.random() - 0.5) * starScale * 10;\r\n      }\r\n\r\n      this.r = Math.random() * 1.5 + 1.1;\r\n      this.opacity = this.isComet ? 0.2 : 0; // 彗星初始就有一定透明度\r\n      this.opacityTresh = Math.random() * 0.6 + 0.4;\r\n      this.do = Math.random() * 0.002 + 0.001;\r\n    };\r\n\r\n    Star.prototype.update = function () {\r\n      if (this.opacity < this.opacityTresh) {\r\n        this.opacity += this.do;\r\n      } else if (this.opacity > 0) {\r\n        this.opacity -= this.do / 2;\r\n      }\r\n\r\n      // 修改边界检测逻辑，扩大边界范围以防止星星在边缘消失\r\n      if (\r\n        this.x < -20 ||\r\n        this.x > width + 20 ||\r\n        this.y < -20 ||\r\n        this.y > height + 20\r\n      ) {\r\n        this.needsReset = true;\r\n        return;\r\n      }\r\n\r\n      this.x += this.dx;\r\n      this.y += this.dy;\r\n      this.draw();\r\n    };\r\n\r\n    Star.prototype.draw = function () {\r\n      context.beginPath();\r\n      if (this.isComet) {\r\n        // 绘制彗星\r\n        context.fillStyle = `rgba(${colors.comet},${this.opacity})`;\r\n        context.arc(this.x, this.y, 1.5, 0, 2 * Math.PI);\r\n\r\n        // 绘制彗星尾巴\r\n        const tailLength = Math.min(30, Math.floor((this.dx + this.dy) * 1.5));\r\n        for (let i = 0; i < tailLength; i++) {\r\n          context.fillStyle = `rgba(${colors.comet},${\r\n            this.opacity - (this.opacity / tailLength) * i\r\n          })`;\r\n          context.fillRect(\r\n            this.x - (this.dx / 3) * i,\r\n            this.y - (this.dy / 3) * i - 1,\r\n            2,\r\n            2\r\n          );\r\n        }\r\n      } else {\r\n        // 绘制普通星星\r\n        context.fillStyle = `rgba(${colors.star},${this.opacity})`;\r\n        context.fillRect(this.x, this.y, this.r, this.r);\r\n      }\r\n      context.closePath();\r\n      context.fill();\r\n    };\r\n\r\n    init();\r\n\r\n    // 清理函数\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      if (requestRef.current) {\r\n        cancelAnimationFrame(requestRef.current);\r\n      }\r\n    };\r\n  }, [frameDelay]); // 添加frameDelay作为依赖项\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      id=\"universe\"\r\n      className=\"fixed top-0 left-0 w-full h-full\"\r\n      style={{\r\n        zIndex: 0,\r\n        willChange: \"transform\", // 使用will-change优化\r\n        transform: \"translateZ(0)\", // 强制GPU加速\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default UniverseCanvas;\r\n"],"names":["UniverseCanvas","canvasRef","useRef","requestRef","lastTimeRef","frameDelay","useEffect","canvas","current","context","getContext","width","height","starCount","cometCount","stars","comets","colors","isMobile","window","innerWidth","MAX_COMETS","COMET_INTERVAL","STAR_DENSITY","lastCometTime","createStars","Math","round","i","push","Star","handleResize","resize","innerHeight","animate","timestamp","requestAnimationFrame","clearRect","forEach","star","index","update","needsReset","comet","currentTime","Date","now","length","isComet","this","reset","prototype","x","random","y","dx","dy","r","opacity","opacityTresh","do","draw","beginPath","fillStyle","concat","arc","PI","tailLength","min","floor","fillRect","closePath","fill","addEventListener","init","removeEventListener","cancelAnimationFrame","_jsx","ref","id","className","style","zIndex","willChange","transform"],"sourceRoot":""}